@Flow Control
=== RUN   TestFlowControl
--- FAIL: TestFlowControl (0.00s)
    flowControl_test.go:8: you should be able to conditionally branch your code
    flowControl_test.go:18:  should be 2
        
    flowControl_test.go:23:  should be 101
        
    flowControl_test.go:28:  should be fizz
        
    flowControl_test.go:33:  should be fizz
        
    flowControl_test.go:38:  should be fizz
        
    flowControl_test.go:43:  should be buzz
        
    flowControl_test.go:48:  should be buzz
        
    flowControl_test.go:53:  should be buzz
        
    flowControl_test.go:58:  should be fizzbuzz
        
    flowControl_test.go:63:  should be fizzbuzz
        
FAIL
FAIL	command-line-arguments	0.001s
FAIL
@Slices
=== RUN   TestIndexOf
--- FAIL: TestIndexOf (0.00s)
    slices_test.go:9: you should be able to determine the location of an item in a slice
    slices_test.go:16: 0 should be 2
        
    slices_test.go:20: 0 should be -1
        
=== RUN   TestSum
--- FAIL: TestSum (0.00s)
    slices_test.go:25: you should be able to sum the items of a slice
    slices_test.go:31: 0 should be 10
        
=== RUN   TestRemove
--- FAIL: TestRemove (0.00s)
    slices_test.go:36: you should be able to remove all instances of a value from a slice
    slices_test.go:43: 0 should be 3
        
    slices_test.go:46: [] should be [1 3 4]
        
=== RUN   TestFront
--- FAIL: TestFront (0.00s)
    slices_test.go:51: you should be able to get the value of the first element of a slice
    slices_test.go:58: 0 should be 1
        
=== RUN   TestBack
--- FAIL: TestBack (0.00s)
    slices_test.go:63: you should be able to get the value of the last element of a slice
    slices_test.go:70: 0 should be 1
        
=== RUN   TestPushBack
--- FAIL: TestPushBack (0.00s)
    slices_test.go:75: you should be able to add an item to the end of a slice
    slices_test.go:82: 0 should be 5
        
    slices_test.go:85: [] should be [1 2 3 4 2]
        
=== RUN   TestPopBack
--- FAIL: TestPopBack (0.00s)
    slices_test.go:90: you should be able to remove the last item of a slice
    slices_test.go:97: 0 should be 3
        
    slices_test.go:100: [] should be [1 2 3]
        
=== RUN   TestPushFront
--- FAIL: TestPushFront (0.00s)
    slices_test.go:105: you should be able to add an item to the front of a slice
    slices_test.go:112: 0 should be 5
        
    slices_test.go:115: [] should be [2 1 2 3 4]
        
=== RUN   TestPopFront
--- FAIL: TestPopFront (0.00s)
    slices_test.go:121: you should be able to remove the first item of a slice
    slices_test.go:128: 0 should be 3
        
    slices_test.go:131: [] should be [2 3 4]
        
=== RUN   TestConcat
--- FAIL: TestConcat (0.00s)
    slices_test.go:136: you should be able to join together two slices
    slices_test.go:144: 0 should be 8
        
    slices_test.go:147: [] should be [1 2 3 4 5 6 7 8]
        
=== RUN   TestInsert
--- FAIL: TestInsert (0.00s)
    slices_test.go:152: you should be able to add an item anywhere in a slice
    slices_test.go:160: 0 should be 5
        
    slices_test.go:163: [] should be [1 2 5 3 4]
        
=== RUN   TestCount
--- FAIL: TestCount (0.00s)
    slices_test.go:169: you should be able to count the occurences of an item in a slice
    slices_test.go:176: 0 should be 3
        
=== RUN   TestDuplicates
--- FAIL: TestDuplicates (0.00s)
    slices_test.go:181: you should be able to find duplicates in a slice
    slices_test.go:190: 0 should be 3
        
    slices_test.go:193: [] should be [1 3 4]
        
=== RUN   TestSquare
--- FAIL: TestSquare (0.00s)
    slices_test.go:198: you should be able to square each number in a slice
    slices_test.go:205: [] should be [1 4 9 16]
        
=== RUN   TestFindAllOccurrences
--- FAIL: TestFindAllOccurrences (0.00s)
    slices_test.go:210: you should be able to find all occurrences of an item in an array and return their indices
    slices_test.go:217: [] should be [0 6]
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
@Logical Operators
=== RUN   TestLogicalOr
--- FAIL: TestLogicalOr (0.00s)
    logicalOperators_test.go:6: you should be able to work with logical or
    logicalOperators_test.go:26: true should be false
        
=== RUN   TestLogicalAnd
--- FAIL: TestLogicalAnd (0.00s)
    logicalOperators_test.go:31: you should be able to work with logical and
    logicalOperators_test.go:36: true should be false
        
    logicalOperators_test.go:41: true should be false
        
    logicalOperators_test.go:51: true should be false
        
=== RUN   TestLogicalNot
--- FAIL: TestLogicalNot (0.00s)
    logicalOperators_test.go:56: you should be able to work with logical not
    logicalOperators_test.go:66: true should be false
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
@Numbers
=== RUN   TestValueAtBit
--- FAIL: TestValueAtBit (0.00s)
    numbers_test.go:6: you should be able to find the value of a given bit
    numbers_test.go:11: 0 should be 1
        
    numbers_test.go:16: 0 should be 1
        
    numbers_test.go:21: 0 should be 1
        
=== RUN   TestBase10
--- FAIL: TestBase10 (0.00s)
    numbers_test.go:32: you should be able to return the base10 representation of a binary string'
    numbers_test.go:37: 0 should be 192
        
=== RUN   TestConvertoBinary
--- FAIL: TestConvertoBinary (0.00s)
    numbers_test.go:42: you should be able to convert an eight-bit number to a binary string
    numbers_test.go:47:  should be 10000000
        
    numbers_test.go:52:  should be 01000001
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
@Strings
=== RUN   TestReduceString
--- FAIL: TestReduceString (0.00s)
    strings_test.go:6: you should be able to reduce duplicate characters to a desired minimum
    strings_test.go:15:  should be aabb
        
    strings_test.go:22:  should be xaabb
        
    strings_test.go:29:  should be ab
        
    strings_test.go:36:  should be aaxxaabb
        
=== RUN   TestWordWrap
--- FAIL: TestWordWrap (0.00s)
    strings_test.go:42: you should be able to wrap lines at a given number of columns, without breaking words
    strings_test.go:54:  should be abcdef_abcde_abc_def
        
    strings_test.go:61:  should be abc_abc_abc
        
    strings_test.go:68:  should be a b c_def
        
=== RUN   TestReverseString
--- FAIL: TestReverseString (0.00s)
    strings_test.go:81:  should be cba
        
    strings_test.go:88:  should be sretcarahc fo gnirts a ma i
        
    strings_test.go:95:  should be amanaP :lanac a ,nalp a ,nam A
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
@Functions
=== RUN   TestFunction
--- FAIL: TestFunction (0.00s)
    functions_test.go:11: you should be able to return a function from a function
    functions_test.go:30:  should be Hello, world
        
    functions_test.go:42:  should be Hai, can i haz funxtion?
        
=== RUN   TestClosures
--- FAIL: TestClosures (0.00s)
    functions_test.go:48: you should be able to use closures
    functions_test.go:55: 0 should be 3
        
=== RUN   TestPartial
--- FAIL: TestPartial (0.00s)
    functions_test.go:69: you should be able to create a 'partial' function
    functions_test.go:78: fPartial returned nil
=== RUN   TestMap
--- FAIL: TestMap (0.00s)
    functions_test.go:100: you should be able to implement a function MAP function
    functions_test.go:114: 0 should be 1
        
    functions_test.go:114: 0 should be 4
        
    functions_test.go:114: 0 should be 9
        
    functions_test.go:114: 0 should be 16
        
    functions_test.go:114: 0 should be 25
        
=== RUN   TestReduce
--- FAIL: TestReduce (0.00s)
    functions_test.go:121: you should be able to implement a function REDUCE function
    functions_test.go:132: 0 should be 15
        
=== RUN   TestFilter
--- FAIL: TestFilter (0.00s)
    functions_test.go:151: 0 should be 1
        
    functions_test.go:151: 0 should be 3
        
    functions_test.go:151: 0 should be 5
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
@Recursion
=== RUN   TestListFiles
--- FAIL: TestListFiles (0.00s)
    recursion_test.go:37: you should be able to return a list of files from the data
    recursion_test.go:43: 0 should be 8
        
    recursion_test.go:48: -1 should be >= 0
    recursion_test.go:53: -1 should be >= 0
    recursion_test.go:58: -1 should be -1
        
=== RUN   TestListDir
--- FAIL: TestListDir (0.00s)
    recursion_test.go:63: you should be able to return a list of files in a subdir
    recursion_test.go:69: 0 should be 5
        
    recursion_test.go:74: -1 should be >= 0
    recursion_test.go:79: -1 should be >= 0
=== RUN   TestPermute
--- FAIL: TestPermute (0.00s)
    recursion_test.go:113: you should be able to return the permutations of an array
    recursion_test.go:120: 0 should be 24
        
=== RUN   TestFibonacci
--- FAIL: TestFibonacci (0.00s)
    recursion_test.go:133: you should be able to return the nth number in a fibonacci sequence
    recursion_test.go:138: 0 should be 1
        
    recursion_test.go:142: 0 should be 8
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
@Methods
=== RUN   TestMethodsSort
--- FAIL: TestMethodsSort (0.00s)
    methods_test.go:27: you should be able to implement the Sort interface for a specified type
    methods_test.go:46: {20 January} should be {18 April}
        
    methods_test.go:46: {18 April} should be {20 January}
        
    methods_test.go:46: {45 June} should be {30 August}
        
    methods_test.go:46: {30 August} should be {45 June}
        
=== RUN   TestMethodsHeap
--- FAIL: TestMethodsHeap (0.00s)
    methods_test.go:53: you should be able to implement the Heap interface for a specified type
    methods_test.go:80: heap should not be empty
=== RUN   TestMethodsList
--- FAIL: TestMethodsList (0.00s)
    methods_test.go:96: you should be able to create and populate a list
    methods_test.go:107: should return a list
=== RUN   TestMethodsNotify
--- FAIL: TestMethodsNotify (0.00s)
    methods_test.go:137: you should be able to use an interface with different types
    methods_test.go:149:  should be new mail for 12345:September
        
    methods_test.go:157:  should be new mail for October
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
@Regex
=== RUN   TestContainsNumber
--- FAIL: TestContainsNumber (0.00s)
    regex_test.go:6: you should be able to detect a number in a string
    regex_test.go:11: false should be true
        
=== RUN   TestRepeatingLetter
--- FAIL: TestRepeatingLetter (0.00s)
    regex_test.go:21: you should be able to detect a repeating letter in a string
    regex_test.go:26: false should be true
        
    regex_test.go:31: false should be true
        
    regex_test.go:36: false should be true
        
=== RUN   TestEndsWithVowel
--- FAIL: TestEndsWithVowel (0.00s)
    regex_test.go:51: you should be able to determine whether a string ends with a vowel (aeiou)
    regex_test.go:61: false should be true
        
    regex_test.go:66: false should be true
        
=== RUN   TestCaptureThreeNumbers
--- FAIL: TestCaptureThreeNumbers (0.00s)
    regex_test.go:71: you should be able to capture the first series of three numbers
    regex_test.go:79:  should be 123
        
    regex_test.go:86:  should be 987
        
=== RUN   TestMatchesPattern
--- FAIL: TestMatchesPattern (0.00s)
    regex_test.go:105: you should be able to determine whether a string matches a pattern
    regex_test.go:111: false should be true
        
    regex_test.go:116: false should be true
        
=== RUN   TestIsUSD
--- FAIL: TestIsUSD (0.00s)
    regex_test.go:151: you should be able to detect correctly-formatted monetary amounts in USD
    regex_test.go:157: false should be true
        
    regex_test.go:162: false should be true
        
    regex_test.go:167: false should be true
        
    regex_test.go:172: false should be true
        
    regex_test.go:177: false should be true
        
    regex_test.go:182: false should be true
        
    regex_test.go:187: false should be true
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
@Async
