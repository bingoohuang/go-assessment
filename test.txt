@Flow Control
=== RUN   TestFlowControl
--- FAIL: TestFlowControl (0.00s)
    flowControl_test.go:8: you should be able to conditionally branch your code
    flowControl_test.go:18:  should be 2
        
    flowControl_test.go:23:  should be 101
        
    flowControl_test.go:29:  should be fizz
        
    flowControl_test.go:33:  should be fizz
        
    flowControl_test.go:37:  should be fizz
        
    flowControl_test.go:43:  should be buzz
        
    flowControl_test.go:47:  should be buzz
        
    flowControl_test.go:51:  should be buzz
        
    flowControl_test.go:57:  should be fizzbuzz
        
    flowControl_test.go:62:  should be fizzbuzz
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
@Slices
=== RUN   TestIndexOf
--- FAIL: TestIndexOf (0.00s)
    slices_test.go:13: you should be able to determine the location of an item in a slice
    slices_test.go:21: 0 should be 2
        
    slices_test.go:25: 0 should be -1
        
=== RUN   TestSum
--- FAIL: TestSum (0.00s)
    slices_test.go:30: you should be able to sum the items of a slice
    slices_test.go:37: 0 should be 10
        
=== RUN   TestRemove
--- FAIL: TestRemove (0.00s)
    slices_test.go:42: you should be able to remove all instances of a value from a slice
    slices_test.go:55: 0 should be 3
        
    slices_test.go:58: [] should be [1 3 4]
        
=== RUN   TestFront
--- FAIL: TestFront (0.00s)
    slices_test.go:63: you should be able to get the value of the first element of a slice
    slices_test.go:71: 0 should be 1
        
=== RUN   TestBack
--- FAIL: TestBack (0.00s)
    slices_test.go:76: you should be able to get the value of the last element of a slice
    slices_test.go:84: 0 should be 1
        
=== RUN   TestPushBack
--- FAIL: TestPushBack (0.00s)
    slices_test.go:89: you should be able to add an item to the end of an slice
    slices_test.go:98: 0 should be 5
        
    slices_test.go:101: [] should be [1 2 3 4 2]
        
=== RUN   TestPopBack
--- FAIL: TestPopBack (0.00s)
    slices_test.go:106: you should be able to remove the last item of an slice
    slices_test.go:115: 0 should be 3
        
    slices_test.go:118: [] should be [1 2 3]
        
=== RUN   TestPushFront
--- FAIL: TestPushFront (0.00s)
    slices_test.go:123: you should be able to add an item to the front of an slice
    slices_test.go:132: 0 should be 5
        
    slices_test.go:135: [] should be [2 1 2 3 4]
        
=== RUN   TestPopFront
--- FAIL: TestPopFront (0.00s)
    slices_test.go:141: you should be able to remove the last item of an slice
    slices_test.go:150: 0 should be 3
        
    slices_test.go:153: [] should be [2 3 4]
        
=== RUN   TestConcat
--- FAIL: TestConcat (0.00s)
    slices_test.go:158: you should be able to join together two slices
    slices_test.go:159: you should be able to remove the last item of an slice
    slices_test.go:168: 0 should be 8
        
    slices_test.go:171: [] should be [1 2 3 4 5 6 7 8]
        
=== RUN   TestInsert
--- FAIL: TestInsert (0.00s)
    slices_test.go:176: you should be able to add an item anywhere in a slice
    slices_test.go:185: 0 should be 5
        
    slices_test.go:188: [] should be [1 2 5 3 4]
        
=== RUN   TestCount
--- FAIL: TestCount (0.00s)
    slices_test.go:194: you should be able to count the occurences of an item in a slice
    slices_test.go:202: 0 should be 3
        
=== RUN   TestDuplicates
--- FAIL: TestDuplicates (0.00s)
    slices_test.go:207: you should be able to find duplicates in a slice
    slices_test.go:217: 0 should be 3
        
    slices_test.go:220: [] should be [1 3 4]
        
=== RUN   TestSquare
--- FAIL: TestSquare (0.00s)
    slices_test.go:225: you should be able to square each number in a slice
    slices_test.go:234: [] should be [1 4 9 16]
        
=== RUN   TestFindAllOccurrences
--- FAIL: TestFindAllOccurrences (0.00s)
    slices_test.go:239: you should be able to find all occurrences of an item in an array and return their indices
    slices_test.go:247: [] should be [0 6]
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
@Logical Operators
=== RUN   TestLogicalOr
--- FAIL: TestLogicalOr (0.00s)
    logicalOperators_test.go:6: you should be able to work with logical or
    logicalOperators_test.go:26: true should be false
        
=== RUN   TestLogicalAnd
--- FAIL: TestLogicalAnd (0.00s)
    logicalOperators_test.go:31: you should be able to work with logical and
    logicalOperators_test.go:36: true should be false
        
    logicalOperators_test.go:41: true should be false
        
    logicalOperators_test.go:51: true should be false
        
=== RUN   TestLogicalNot
--- FAIL: TestLogicalNot (0.00s)
    logicalOperators_test.go:56: you should be able to work with logical not
    logicalOperators_test.go:66: true should be false
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
@Numbers
=== RUN   TestValueAtBit
--- FAIL: TestValueAtBit (0.00s)
    numbers_test.go:6: you should be able to find the value of a given bit
    numbers_test.go:12: 0 should be 1
        
    numbers_test.go:17: 0 should be 1
        
    numbers_test.go:22: 0 should be 1
        
=== RUN   TestBase10
--- FAIL: TestBase10 (0.00s)
    numbers_test.go:33: you should be able to return the base10 representation of a binary string'
    numbers_test.go:38: 0 should be 192
        
=== RUN   TestConvertoBinary
--- FAIL: TestConvertoBinary (0.00s)
    numbers_test.go:43: you should be able to convert an eight-bit number to a binary string
    numbers_test.go:49:  should be 10000000
        
    numbers_test.go:54:  should be 01000001
        
=== RUN   TestMultiplyWithPrecision
--- FAIL: TestMultiplyWithPrecision (0.00s)
    numbers_test.go:59: you should be able to multiply with precision
    numbers_test.go:65: 0 should be 0.3
        
    numbers_test.go:70: 0 should be 0.6
        
    numbers_test.go:75: 0 should be 0.0003
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
@Strings
@Functions
=== RUN   TestFunction
--- FAIL: TestFunction (0.00s)
    functions_test.go:13: you should be able to return a function from a function
    functions_test.go:36:  should be Hello, world
        
    functions_test.go:47:  should be Hai, can i haz funxtion?
        
=== RUN   TestClosures
--- FAIL: TestClosures (0.00s)
    functions_test.go:53: you should be able to use closures
    functions_test.go:65: 0 should be 3
        
=== RUN   TestPartial
--- FAIL: TestPartial (0.00s)
    functions_test.go:79: you should be able to create a 'partial' function
    functions_test.go:93: fPartial returned nil
=== RUN   TestMap
--- FAIL: TestMap (0.00s)
    functions_test.go:115: you should be able to implement a function MAP function
    functions_test.go:134: 0 should be 1
        
    functions_test.go:134: 0 should be 4
        
    functions_test.go:134: 0 should be 9
        
    functions_test.go:134: 0 should be 16
        
    functions_test.go:134: 0 should be 25
        
=== RUN   TestReduce
--- FAIL: TestReduce (0.00s)
    functions_test.go:141: you should be able to implement a function REDUCE function
    functions_test.go:157: 0 should be 15
        
=== RUN   TestFilter
--- FAIL: TestFilter (0.00s)
    functions_test.go:181: 0 should be 1
        
    functions_test.go:181: 0 should be 3
        
    functions_test.go:181: 0 should be 5
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
@Recursion
=== RUN   TestListFiles
--- FAIL: TestListFiles (0.00s)
    recursion_test.go:37: you should be able to return a list of files from the data
    recursion_test.go:42: 0 should be 8
        
    recursion_test.go:46: -1 should be >= 0
    recursion_test.go:50: -1 should be >= 0
    recursion_test.go:54: -1 should be -1
        
=== RUN   TestListDir
--- FAIL: TestListDir (0.00s)
    recursion_test.go:59: you should be able to return a list of files in a subdir
    recursion_test.go:64: 0 should be 5
        
    recursion_test.go:69: -1 should be >= 0
    recursion_test.go:73: -1 should be >= 0
=== RUN   TestPermute
--- FAIL: TestPermute (0.00s)
    recursion_test.go:107: you should be able to return the permutations of an array
    recursion_test.go:115: 0 should be 24
        
=== RUN   TestFibonacci
--- FAIL: TestFibonacci (0.00s)
    recursion_test.go:128: you should be able to return the nth number in a fibonacci sequence
    recursion_test.go:133: 0 should be 1
        
    recursion_test.go:137: 0 should be 8
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
@Methods
@Regex
@Count
@Async
