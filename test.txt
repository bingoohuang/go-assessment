=== RUN   TestFlowControl
--- PASS: TestFlowControl (0.00s)
    flowControl_test.go:17: you should be able to conditionally branch your code
PASS
ok  	command-line-arguments	0.001s
=== RUN   TestLogicalOr
--- PASS: TestLogicalOr (0.00s)
    logicalOperators_test.go:9: you should be able to work with logical or
=== RUN   TestLogicalAnd
--- PASS: TestLogicalAnd (0.00s)
    logicalOperators_test.go:37: you should be able to work with logical and
=== RUN   TestLogicalNot
--- PASS: TestLogicalNot (0.00s)
    logicalOperators_test.go:65: you should be able to work with logical not
PASS
ok  	command-line-arguments	0.002s
=== RUN   TestStringCompose
--- PASS: TestStringCompose (0.00s)
    strings_test.go:11: you should be able to compose a string from arguments
=== RUN   TestStringFromBytes
--- PASS: TestStringFromBytes (0.00s)
    strings_test.go:26: you should be able to convert a byte array to a string
=== RUN   TestRunes
--- PASS: TestRunes (0.00s)
    strings_test.go:44: you should be able to decompose a UTF-8 string into an array of runes
=== RUN   TestSplitString
--- PASS: TestSplitString (0.00s)
    strings_test.go:77: you should be able to split a string into words
=== RUN   TestTitleCase
--- PASS: TestTitleCase (0.00s)
    strings_test.go:104: you should be able to convert a string to title case
=== RUN   TestReduceString
--- PASS: TestReduceString (0.00s)
    strings_test.go:124: you should be able to reduce adjacent repeated characters to a desired minimum
=== RUN   TestWordWrap
--- PASS: TestWordWrap (0.00s)
    strings_test.go:168: you should be able to wrap lines at a given number of columns, without breaking words
=== RUN   TestReverseString
--- PASS: TestReverseString (0.00s)
    strings_test.go:203: you should be able to reverse the characters in a string
PASS
ok  	command-line-arguments	0.002s
=== RUN   TestIndexOf
--- PASS: TestIndexOf (0.00s)
    slices_test.go:12: you should be able to determine the location of an item in a slice
=== RUN   TestSum
--- PASS: TestSum (0.00s)
    slices_test.go:30: you should be able to sum the items of a slice
=== RUN   TestRemove
--- PASS: TestRemove (0.00s)
    slices_test.go:44: you should be able to remove all instances of a value from a slice
=== RUN   TestFront
--- PASS: TestFront (0.00s)
    slices_test.go:61: you should be able to get the value of the first element of a slice
=== RUN   TestBack
--- PASS: TestBack (0.00s)
    slices_test.go:75: you should be able to get the value of the last element of a slice
=== RUN   TestPushBack
--- PASS: TestPushBack (0.00s)
    slices_test.go:89: you should be able to add an item to the end of a slice
=== RUN   TestPopBack
--- PASS: TestPopBack (0.00s)
    slices_test.go:106: you should be able to remove the last item of a slice
=== RUN   TestPushFront
--- PASS: TestPushFront (0.00s)
    slices_test.go:123: you should be able to add an item to the front of a slice
=== RUN   TestPopFront
--- PASS: TestPopFront (0.00s)
    slices_test.go:141: you should be able to remove the first item of a slice
=== RUN   TestConcat
--- PASS: TestConcat (0.00s)
    slices_test.go:158: you should be able to join together two slices
=== RUN   TestInsert
--- PASS: TestInsert (0.00s)
    slices_test.go:177: you should be able to add an item anywhere in a slice
=== RUN   TestCount
--- PASS: TestCount (0.00s)
    slices_test.go:228: you should be able to count the occurences of an item in a slice
=== RUN   TestDuplicates
--- PASS: TestDuplicates (0.00s)
    slices_test.go:242: you should be able to find duplicates in a slice
=== RUN   TestSquare
--- PASS: TestSquare (0.00s)
    slices_test.go:261: you should be able to square each number in a slice
=== RUN   TestFindAllOccurrences
--- PASS: TestFindAllOccurrences (0.00s)
    slices_test.go:275: you should be able to find all occurrences of an item in an array and return their indices
PASS
ok  	command-line-arguments	0.002s
=== RUN   TestValueAtBit
--- PASS: TestValueAtBit (0.00s)
    binary_test.go:11: you should be able to find the value of a given bit
=== RUN   TestBase10
--- PASS: TestBase10 (0.00s)
    binary_test.go:46: you should be able to return the base10 representation of a binary string
=== RUN   TestConvertoBinary
--- PASS: TestConvertoBinary (0.00s)
    binary_test.go:59: you should be able to convert an eight-bit number to a binary string
=== RUN   TestBitwiseOr
--- PASS: TestBitwiseOr (0.00s)
    binary_test.go:77: you should be able to use the bitwise OR operator
=== RUN   TestBitwiseAnd
--- PASS: TestBitwiseAnd (0.00s)
    binary_test.go:92: you should be able to use the bitwise AND operator
=== RUN   TestBitwiseXor
--- PASS: TestBitwiseXor (0.00s)
    binary_test.go:108: you should be able to use the bitwise XOR operator
PASS
ok  	command-line-arguments	0.001s
=== RUN   TestFunction
--- PASS: TestFunction (0.00s)
    functions_test.go:13: you should be able to return a function from a function
=== RUN   TestClosures
--- PASS: TestClosures (0.00s)
    functions_test.go:53: you should be able to use closures
=== RUN   TestPartial
--- PASS: TestPartial (0.00s)
    functions_test.go:76: you should be able to create a 'partial' function
=== RUN   TestMap
--- PASS: TestMap (0.00s)
    functions_test.go:111: you should be able to implement a MAP function
=== RUN   TestReduce
--- PASS: TestReduce (0.00s)
    functions_test.go:134: you should be able to implement a REDUCE function
=== RUN   TestFilter
--- PASS: TestFilter (0.00s)
    functions_test.go:153: you should be able to implement a FILTER function
=== RUN   TestVariadic
--- PASS: TestVariadic (0.00s)
    functions_test.go:177: you should be able to implement a variadic function
PASS
ok  	command-line-arguments	0.002s
=== RUN   TestListFiles
--- PASS: TestListFiles (0.00s)
    recursion_test.go:40: you should be able to return a list of files starting at the top level direcotry
=== RUN   TestListDir
--- PASS: TestListDir (0.00s)
    recursion_test.go:69: you should be able to return a list of files starting at the named subdirectory
=== RUN   TestPermute
--- PASS: TestPermute (0.00s)
    recursion_test.go:122: you should be able to return the permutations of an array
=== RUN   TestFibonacci
--- PASS: TestFibonacci (0.00s)
    recursion_test.go:145: you should be able to return the nth number in a fibonacci sequence
=== RUN   TestValidParens
--- PASS: TestValidParens (0.00s)
    recursion_test.go:162: you should be able to return the set of all valid combinations of n pairs of parentheses.
PASS
ok  	command-line-arguments	0.002s
=== RUN   TestMethodsSort
--- FAIL: TestMethodsSort (0.00s)
    methods_test.go:27: you should be able to implement the Sort interface for a specified type
    methods_test.go:46: {20 January} should be {18 April}
        
    methods_test.go:46: {18 April} should be {20 January}
        
    methods_test.go:46: {45 June} should be {30 August}
        
    methods_test.go:46: {30 August} should be {45 June}
        
=== RUN   TestMethodsHeap
--- FAIL: TestMethodsHeap (0.00s)
    methods_test.go:55: you should be able to implement the Heap interface for a specified type
    methods_test.go:82: heap should not be empty
=== RUN   TestMethodsList
--- FAIL: TestMethodsList (0.00s)
    methods_test.go:100: you should be able to create and populate a list
    methods_test.go:111: should return a list
=== RUN   TestMethodsNotify
--- FAIL: TestMethodsNotify (0.00s)
    methods_test.go:145: you should be able to use an interface with different types
    methods_test.go:157:  should be new mail for 12345:September
        
    methods_test.go:165:  should be new mail for October
        
=== RUN   TestIntFromInterface
--- FAIL: TestIntFromInterface (0.00s)
    methods_test.go:173: you shoud be able to extract a value from an interface
    methods_test.go:182: 0 should be 5
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
=== RUN   TestContainsNumber
--- FAIL: TestContainsNumber (0.00s)
    regex_test.go:9: you should be able to detect a number in a string
    regex_test.go:14: false should be true
        
=== RUN   TestRepeatingLetter
--- FAIL: TestRepeatingLetter (0.00s)
    regex_test.go:25: you should be able to detect a repeating letter in a string
    regex_test.go:30: false should be true
        
    regex_test.go:35: false should be true
        
    regex_test.go:40: false should be true
        
=== RUN   TestEndsWithVowel
--- FAIL: TestEndsWithVowel (0.00s)
    regex_test.go:58: you should be able to determine whether a string ends with a vowel (aeiou)
    regex_test.go:68: false should be true
        
    regex_test.go:73: false should be true
        
=== RUN   TestCaptureThreeNumbers
--- FAIL: TestCaptureThreeNumbers (0.00s)
    regex_test.go:81: you should be able to capture the first series of three numbers
    regex_test.go:89:  should be 123
        
    regex_test.go:96:  should be 987
        
=== RUN   TestMatchesPattern
--- FAIL: TestMatchesPattern (0.00s)
    regex_test.go:118: you should be able to determine whether a string matches a pattern
    regex_test.go:124: false should be true
        
    regex_test.go:129: false should be true
        
=== RUN   TestIsUSD
--- FAIL: TestIsUSD (0.00s)
    regex_test.go:167: you should be able to detect correctly-formatted monetary amounts in USD
    regex_test.go:173: false should be true
        
    regex_test.go:178: false should be true
        
    regex_test.go:183: false should be true
        
    regex_test.go:188: false should be true
        
    regex_test.go:193: false should be true
        
    regex_test.go:198: false should be true
        
    regex_test.go:203: false should be true
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
=== RUN   TestAsync
--- FAIL: TestAsync (0.00s)
    async_test.go:20: you should be able to send values to a channel with a delay
    async_test.go:43: select statement timed out
FAIL
FAIL	command-line-arguments	0.002s
FAIL
t.go:198: false should be true
        
    regex_test.go:203: false should be true
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
=== RUN   TestAsync
--- FAIL: TestAsync (0.00s)
    async_test.go:20: you should be able to send values to a channel with a delay
    async_test.go:43: select statement timed out
FAIL
FAIL	command-line-arguments	0.002s
FAIL
IL
FAIL	command-line-arguments	0.002s
FAIL
02s
FAIL
s
FAIL

=== RUN   TestAsync
--- FAIL: TestAsync (0.00s)
    async_test.go:20: you should be able to send values to a channel with a delay
    async_test.go:43: select statement timed out
FAIL
FAIL	command-line-arguments	0.002s
FAIL
 delay
    async_test.go:43: select statement timed out
FAIL
FAIL	command-line-arguments	0.002s
FAIL
stEndsWithVowel
--- FAIL: TestEndsWithVowel (0.00s)
    regex_test.go:54: you should be able to determine whether a string ends with a vowel (aeiou)
    regex_test.go:64: false should be true
        
    regex_test.go:69: false should be true
        
=== RUN   TestCaptureThreeNumbers
--- FAIL: TestCaptureThreeNumbers (0.00s)
    regex_test.go:75: you should be able to capture the first series of three numbers
    regex_test.go:83:  should be 123
        
    regex_test.go:90:  should be 987
        
=== RUN   TestMatchesPattern
--- FAIL: TestMatchesPattern (0.00s)
    regex_test.go:110: you should be able to determine whether a string matches a pattern
    regex_test.go:116: false should be true
        
    regex_test.go:121: false should be true
        
=== RUN   TestIsUSD
--- FAIL: TestIsUSD (0.00s)
    regex_test.go:157: you should be able to detect correctly-formatted monetary amounts in USD
    regex_test.go:163: false should be true
        
    regex_test.go:168: false should be true
        
    regex_test.go:173: false should be true
        
    regex_test.go:178: false should be true
        
    regex_test.go:183: false should be true
        
    regex_test.go:188: false should be true
        
    regex_test.go:193: false should be true
        
FAIL
FAIL	command-line-arguments	0.002s
FAIL
Async
=== RUN   TestAsync
--- FAIL: TestAsync (0.00s)
    async_test.go:19: you should be able to send values to a channel with a delay
    async_test.go:42: select statement timed out
FAIL
FAIL	command-line-arguments	0.002s
FAIL
