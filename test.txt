=== RUN   TestIndexOf
--- FAIL: TestIndexOf (0.00s)
    slices_test.go:13: you should be able to determine the location of an item in a slice
    slices_test.go:21: 0 should be 2
        
    slices_test.go:25: 0 should be -1
        
=== RUN   TestSum
--- FAIL: TestSum (0.00s)
    slices_test.go:30: you should be able to sum the items of a slice
    slices_test.go:37: 0 should be 10
        
=== RUN   TestRemove
--- FAIL: TestRemove (0.00s)
    slices_test.go:42: you should be able to remove all instances of a value from a slice
    slices_test.go:55: 0 should be 3
        
    slices_test.go:58: [] should be [1 3 4]
        
=== RUN   TestFront
--- FAIL: TestFront (0.00s)
    slices_test.go:63: you should be able to get the value of the first element of a slice
    slices_test.go:71: 0 should be 1
        
=== RUN   TestBack
--- FAIL: TestBack (0.00s)
    slices_test.go:76: you should be able to get the value of the last element of a slice
    slices_test.go:84: 0 should be 1
        
=== RUN   TestPushBack
--- FAIL: TestPushBack (0.00s)
    slices_test.go:89: you should be able to add an item to the end of an slice
    slices_test.go:98: 0 should be 5
        
    slices_test.go:101: [] should be [1 2 3 4 2]
        
=== RUN   TestPopBack
--- FAIL: TestPopBack (0.00s)
    slices_test.go:106: you should be able to remove the last item of an slice
    slices_test.go:115: 0 should be 3
        
    slices_test.go:118: [] should be [1 2 3]
        
=== RUN   TestPushFront
--- FAIL: TestPushFront (0.00s)
    slices_test.go:123: you should be able to add an item to the front of an slice
    slices_test.go:132: 0 should be 5
        
    slices_test.go:135: [] should be [2 1 2 3 4]
        
=== RUN   TestPopFront
--- FAIL: TestPopFront (0.00s)
    slices_test.go:141: you should be able to remove the last item of an slice
    slices_test.go:150: 0 should be 3
        
    slices_test.go:153: [] should be [2 3 4]
        
=== RUN   TestConcat
--- FAIL: TestConcat (0.00s)
    slices_test.go:158: you should be able to join together two slices
    slices_test.go:159: you should be able to remove the last item of an slice
    slices_test.go:168: 0 should be 8
        
    slices_test.go:171: [] should be [1 2 3 4 5 6 7 8]
        
=== RUN   TestInsert
--- FAIL: TestInsert (0.00s)
    slices_test.go:176: you should be able to add an item anywhere in a slice
    slices_test.go:185: 0 should be 5
        
    slices_test.go:188: [] should be [1 2 5 3 4]
        
=== RUN   TestCount
--- FAIL: TestCount (0.00s)
    slices_test.go:194: you should be able to count the occurences of an item in a slice
    slices_test.go:202: 0 should be 3
        
=== RUN   TestDuplicates
--- FAIL: TestDuplicates (0.00s)
    slices_test.go:207: you should be able to find duplicates in a slice
    slices_test.go:217: 0 should be 3
        
    slices_test.go:220: [] should be [1 3 4]
        
=== RUN   TestSquare
--- PASS: TestSquare (0.00s)
    slices_test.go:225: you should be able to square each number in a slice
=== RUN   TestFindAllOccurrences
--- FAIL: TestFindAllOccurrences (0.00s)
    slices_test.go:239: you should be able to find all occurrences of an item in an array and return their indices
    slices_test.go:247: [] should be [0 6]
        
FAIL
exit status 1
FAIL	dmh2000.xyz/goassessment/app	0.002s
